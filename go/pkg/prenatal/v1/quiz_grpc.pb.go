// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: prenatal/v1/quiz.proto

package prenatal

import (
	context "context"
	prenatal "github.com/liankui/prenatal/go/pkg/prenatal"
	core "github.com/mojo-lang/core/go/pkg/mojo/core"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*prenatal.Question, error)
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*prenatal.Question, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*prenatal.Question, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*core.Null, error)
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*prenatal.Answer, error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*prenatal.Question, error) {
	out := new(prenatal.Question)
	err := c.cc.Invoke(ctx, "/prenatal.v1.Quiz/create_question", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*prenatal.Question, error) {
	out := new(prenatal.Question)
	err := c.cc.Invoke(ctx, "/prenatal.v1.Quiz/get_question", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*prenatal.Question, error) {
	out := new(prenatal.Question)
	err := c.cc.Invoke(ctx, "/prenatal.v1.Quiz/update_question", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*core.Null, error) {
	out := new(core.Null)
	err := c.cc.Invoke(ctx, "/prenatal.v1.Quiz/delete_question", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*prenatal.Answer, error) {
	out := new(prenatal.Answer)
	err := c.cc.Invoke(ctx, "/prenatal.v1.Quiz/create_answer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServer is the server API for Quiz service.
// All implementations must embed UnimplementedQuizServer
// for forward compatibility
type QuizServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*prenatal.Question, error)
	GetQuestion(context.Context, *GetQuestionRequest) (*prenatal.Question, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*prenatal.Question, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*core.Null, error)
	CreateAnswer(context.Context, *CreateAnswerRequest) (*prenatal.Answer, error)
	mustEmbedUnimplementedQuizServer()
}

// UnimplementedQuizServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServer struct {
}

func (UnimplementedQuizServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*prenatal.Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuizServer) GetQuestion(context.Context, *GetQuestionRequest) (*prenatal.Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQuizServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*prenatal.Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuizServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*core.Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuizServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*prenatal.Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedQuizServer) mustEmbedUnimplementedQuizServer() {}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s grpc.ServiceRegistrar, srv QuizServer) {
	s.RegisterService(&Quiz_ServiceDesc, srv)
}

func _Quiz_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prenatal.v1.Quiz/create_question",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prenatal.v1.Quiz/get_question",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prenatal.v1.Quiz/update_question",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prenatal.v1.Quiz/delete_question",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prenatal.v1.Quiz/create_answer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quiz_ServiceDesc is the grpc.ServiceDesc for Quiz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quiz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prenatal.v1.Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_question",
			Handler:    _Quiz_CreateQuestion_Handler,
		},
		{
			MethodName: "get_question",
			Handler:    _Quiz_GetQuestion_Handler,
		},
		{
			MethodName: "update_question",
			Handler:    _Quiz_UpdateQuestion_Handler,
		},
		{
			MethodName: "delete_question",
			Handler:    _Quiz_DeleteQuestion_Handler,
		},
		{
			MethodName: "create_answer",
			Handler:    _Quiz_CreateAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prenatal/v1/quiz.proto",
}
