// Code generated by ncraft. DO NOT EDIT.
// Rerunning ncraft will overwrite this file.
// Version: 0.1.0
// Version Date:

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/tracing/opentracing"
	grpctransport "github.com/go-kit/kit/transport/grpc"
	stdopentracing "github.com/opentracing/opentracing-go"

	// this service api
	pb "github.com/liankui/prenatal-server/go/pkg/user/v1"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC UserServer.
func MakeGRPCServer(endpoints Endpoints, tracer stdopentracing.Tracer, logger log.Logger) pb.UserServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
		grpctransport.ServerErrorLogger(logger),
	}

	addTracerOption := func(methodName string) []grpctransport.ServerOption {
		if tracer != nil {
			return append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, methodName, logger)))
		}
		return serverOptions
	}

	return &grpcServer{
		// User

		getUserinfo: grpctransport.NewServer(
			endpoints.GetUserinfoEndpoint,
			DecodeGRPCGetUserinfoRequest,
			EncodeGRPCGetUserinfoResponse,
			addTracerOption("get_userinfo")...,
		//append(serverOptions, grpctransport.ServerBefore(opentracing.GRPCToContext(tracer, "get_userinfo", logger)))...,
		),
	}
}

// grpcServer implements the UserServer interface
type grpcServer struct {
	pb.UnimplementedUserServer

	getUserinfo grpctransport.Handler
}

// Methods for grpcServer to implement UserServer interface

func (s *grpcServer) GetUserinfo(ctx context.Context, req *pb.GetUserinfoRequest) (*pb.Userinfo, error) {
	_, rep, err := s.getUserinfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Userinfo), nil
}

// Server Decode

// DecodeGRPCGetUserinfoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC GetUserinfo request to a user-domain GetUserinfo request. Primarily useful in a server.
func DecodeGRPCGetUserinfoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetUserinfoRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCGetUserinfoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain GetUserinfo response to a gRPC GetUserinfo reply. Primarily useful in a server.
func EncodeGRPCGetUserinfoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Userinfo)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
